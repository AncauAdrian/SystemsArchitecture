     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fprintf          
     8                                  import exit msvcrt.dll    
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 416E6120617265206D-         text db "Ana are mere", 0
    16 00000009 65726500           
    17 0000000D 706F76657374652E74-         nume_fisier db "poveste.txt", 0
    17 00000016 787400             
    18 00000019 00000000                    file_descriptor dd 0
    19 0000001D 7700                        mod_acces db "w", 0
    20                                  
    21                                  ; our code starts here
    22                                  segment code use32 class=code
    23                                      start:
    24                                          ; step1 - create/open file
    25                                          ; fopen(nume_fisier, mod_acces)
    26 00000000 68[1D000000]                    push mod_acces
    27 00000005 68[0D000000]                    push nume_fisier
    28 0000000A FF15[00000000]                  call [fopen]
    29 00000010 83C408                          add esp, 4*2
    30                                  
    31 00000013 A3[19000000]                    mov [file_descriptor], eax
    32                                          
    33                                          ; check if successful eax != 0
    34                                          
    35 00000018 83F800                          cmp eax, 0
    36 0000001B 7423                            je final
    37                                          
    38                                          ; step 2 - fprint(file_descriptor, text)
    39 0000001D 68[00000000]                    push text
    40 00000022 FF35[19000000]                  push dword [file_descriptor]
    41 00000028 FF15[00000000]                  call [fprintf]
    42 0000002E 83C408                          add esp, 4*2
    43                                          
    44                                          
    45                                          ; step 3 - fclose(file_descriptor)
    46 00000031 FF35[19000000]                  push dword [file_descriptor]
    47 00000037 FF15[00000000]                  call [fclose]
    48 0000003D 83C404                          add esp, 4
    49                                          
    50                                         
    51                                          final:
    52                                      
    53                                          ; exit(0)
    54 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
